// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/22/2025 18:39:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MIPSGMN
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MIPSGMN_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MIPSGMN_vlg_check_tst (
	finalMux,
	regData1,
	regData2,
	saidaULA,
	sign_extend,
	sampler_rx
);
input [31:0] finalMux;
input [31:0] regData1;
input [31:0] regData2;
input [31:0] saidaULA;
input [31:0] sign_extend;
input sampler_rx;

reg [31:0] finalMux_expected;
reg [31:0] regData1_expected;
reg [31:0] regData2_expected;
reg [31:0] saidaULA_expected;
reg [31:0] sign_extend_expected;

reg [31:0] finalMux_prev;
reg [31:0] regData1_prev;
reg [31:0] regData2_prev;
reg [31:0] saidaULA_prev;
reg [31:0] sign_extend_prev;

reg [31:0] finalMux_expected_prev;
reg [31:0] regData1_expected_prev;
reg [31:0] regData2_expected_prev;
reg [31:0] saidaULA_expected_prev;
reg [31:0] sign_extend_expected_prev;

reg [31:0] last_finalMux_exp;
reg [31:0] last_regData1_exp;
reg [31:0] last_regData2_exp;
reg [31:0] last_saidaULA_exp;
reg [31:0] last_sign_extend_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	finalMux_prev = finalMux;
	regData1_prev = regData1;
	regData2_prev = regData2;
	saidaULA_prev = saidaULA;
	sign_extend_prev = sign_extend;
end

// update expected /o prevs

always @(trigger)
begin
	finalMux_expected_prev = finalMux_expected;
	regData1_expected_prev = regData1_expected;
	regData2_expected_prev = regData2_expected;
	saidaULA_expected_prev = saidaULA_expected;
	sign_extend_expected_prev = sign_extend_expected;
end


// expected finalMux[ 31 ]
initial
begin
	finalMux_expected[31] = 1'bX;
end 
// expected finalMux[ 30 ]
initial
begin
	finalMux_expected[30] = 1'bX;
end 
// expected finalMux[ 29 ]
initial
begin
	finalMux_expected[29] = 1'bX;
end 
// expected finalMux[ 28 ]
initial
begin
	finalMux_expected[28] = 1'bX;
end 
// expected finalMux[ 27 ]
initial
begin
	finalMux_expected[27] = 1'bX;
end 
// expected finalMux[ 26 ]
initial
begin
	finalMux_expected[26] = 1'bX;
end 
// expected finalMux[ 25 ]
initial
begin
	finalMux_expected[25] = 1'bX;
end 
// expected finalMux[ 24 ]
initial
begin
	finalMux_expected[24] = 1'bX;
end 
// expected finalMux[ 23 ]
initial
begin
	finalMux_expected[23] = 1'bX;
end 
// expected finalMux[ 22 ]
initial
begin
	finalMux_expected[22] = 1'bX;
end 
// expected finalMux[ 21 ]
initial
begin
	finalMux_expected[21] = 1'bX;
end 
// expected finalMux[ 20 ]
initial
begin
	finalMux_expected[20] = 1'bX;
end 
// expected finalMux[ 19 ]
initial
begin
	finalMux_expected[19] = 1'bX;
end 
// expected finalMux[ 18 ]
initial
begin
	finalMux_expected[18] = 1'bX;
end 
// expected finalMux[ 17 ]
initial
begin
	finalMux_expected[17] = 1'bX;
end 
// expected finalMux[ 16 ]
initial
begin
	finalMux_expected[16] = 1'bX;
end 
// expected finalMux[ 15 ]
initial
begin
	finalMux_expected[15] = 1'bX;
end 
// expected finalMux[ 14 ]
initial
begin
	finalMux_expected[14] = 1'bX;
end 
// expected finalMux[ 13 ]
initial
begin
	finalMux_expected[13] = 1'bX;
end 
// expected finalMux[ 12 ]
initial
begin
	finalMux_expected[12] = 1'bX;
end 
// expected finalMux[ 11 ]
initial
begin
	finalMux_expected[11] = 1'bX;
end 
// expected finalMux[ 10 ]
initial
begin
	finalMux_expected[10] = 1'bX;
end 
// expected finalMux[ 9 ]
initial
begin
	finalMux_expected[9] = 1'bX;
end 
// expected finalMux[ 8 ]
initial
begin
	finalMux_expected[8] = 1'bX;
end 
// expected finalMux[ 7 ]
initial
begin
	finalMux_expected[7] = 1'bX;
end 
// expected finalMux[ 6 ]
initial
begin
	finalMux_expected[6] = 1'bX;
end 
// expected finalMux[ 5 ]
initial
begin
	finalMux_expected[5] = 1'bX;
end 
// expected finalMux[ 4 ]
initial
begin
	finalMux_expected[4] = 1'bX;
end 
// expected finalMux[ 3 ]
initial
begin
	finalMux_expected[3] = 1'bX;
end 
// expected finalMux[ 2 ]
initial
begin
	finalMux_expected[2] = 1'bX;
end 
// expected finalMux[ 1 ]
initial
begin
	finalMux_expected[1] = 1'bX;
end 
// expected finalMux[ 0 ]
initial
begin
	finalMux_expected[0] = 1'bX;
end 
// expected regData1[ 31 ]
initial
begin
	regData1_expected[31] = 1'bX;
end 
// expected regData1[ 30 ]
initial
begin
	regData1_expected[30] = 1'bX;
end 
// expected regData1[ 29 ]
initial
begin
	regData1_expected[29] = 1'bX;
end 
// expected regData1[ 28 ]
initial
begin
	regData1_expected[28] = 1'bX;
end 
// expected regData1[ 27 ]
initial
begin
	regData1_expected[27] = 1'bX;
end 
// expected regData1[ 26 ]
initial
begin
	regData1_expected[26] = 1'bX;
end 
// expected regData1[ 25 ]
initial
begin
	regData1_expected[25] = 1'bX;
end 
// expected regData1[ 24 ]
initial
begin
	regData1_expected[24] = 1'bX;
end 
// expected regData1[ 23 ]
initial
begin
	regData1_expected[23] = 1'bX;
end 
// expected regData1[ 22 ]
initial
begin
	regData1_expected[22] = 1'bX;
end 
// expected regData1[ 21 ]
initial
begin
	regData1_expected[21] = 1'bX;
end 
// expected regData1[ 20 ]
initial
begin
	regData1_expected[20] = 1'bX;
end 
// expected regData1[ 19 ]
initial
begin
	regData1_expected[19] = 1'bX;
end 
// expected regData1[ 18 ]
initial
begin
	regData1_expected[18] = 1'bX;
end 
// expected regData1[ 17 ]
initial
begin
	regData1_expected[17] = 1'bX;
end 
// expected regData1[ 16 ]
initial
begin
	regData1_expected[16] = 1'bX;
end 
// expected regData1[ 15 ]
initial
begin
	regData1_expected[15] = 1'bX;
end 
// expected regData1[ 14 ]
initial
begin
	regData1_expected[14] = 1'bX;
end 
// expected regData1[ 13 ]
initial
begin
	regData1_expected[13] = 1'bX;
end 
// expected regData1[ 12 ]
initial
begin
	regData1_expected[12] = 1'bX;
end 
// expected regData1[ 11 ]
initial
begin
	regData1_expected[11] = 1'bX;
end 
// expected regData1[ 10 ]
initial
begin
	regData1_expected[10] = 1'bX;
end 
// expected regData1[ 9 ]
initial
begin
	regData1_expected[9] = 1'bX;
end 
// expected regData1[ 8 ]
initial
begin
	regData1_expected[8] = 1'bX;
end 
// expected regData1[ 7 ]
initial
begin
	regData1_expected[7] = 1'bX;
end 
// expected regData1[ 6 ]
initial
begin
	regData1_expected[6] = 1'bX;
end 
// expected regData1[ 5 ]
initial
begin
	regData1_expected[5] = 1'bX;
end 
// expected regData1[ 4 ]
initial
begin
	regData1_expected[4] = 1'bX;
end 
// expected regData1[ 3 ]
initial
begin
	regData1_expected[3] = 1'bX;
end 
// expected regData1[ 2 ]
initial
begin
	regData1_expected[2] = 1'bX;
end 
// expected regData1[ 1 ]
initial
begin
	regData1_expected[1] = 1'bX;
end 
// expected regData1[ 0 ]
initial
begin
	regData1_expected[0] = 1'bX;
end 
// expected regData2[ 31 ]
initial
begin
	regData2_expected[31] = 1'bX;
end 
// expected regData2[ 30 ]
initial
begin
	regData2_expected[30] = 1'bX;
end 
// expected regData2[ 29 ]
initial
begin
	regData2_expected[29] = 1'bX;
end 
// expected regData2[ 28 ]
initial
begin
	regData2_expected[28] = 1'bX;
end 
// expected regData2[ 27 ]
initial
begin
	regData2_expected[27] = 1'bX;
end 
// expected regData2[ 26 ]
initial
begin
	regData2_expected[26] = 1'bX;
end 
// expected regData2[ 25 ]
initial
begin
	regData2_expected[25] = 1'bX;
end 
// expected regData2[ 24 ]
initial
begin
	regData2_expected[24] = 1'bX;
end 
// expected regData2[ 23 ]
initial
begin
	regData2_expected[23] = 1'bX;
end 
// expected regData2[ 22 ]
initial
begin
	regData2_expected[22] = 1'bX;
end 
// expected regData2[ 21 ]
initial
begin
	regData2_expected[21] = 1'bX;
end 
// expected regData2[ 20 ]
initial
begin
	regData2_expected[20] = 1'bX;
end 
// expected regData2[ 19 ]
initial
begin
	regData2_expected[19] = 1'bX;
end 
// expected regData2[ 18 ]
initial
begin
	regData2_expected[18] = 1'bX;
end 
// expected regData2[ 17 ]
initial
begin
	regData2_expected[17] = 1'bX;
end 
// expected regData2[ 16 ]
initial
begin
	regData2_expected[16] = 1'bX;
end 
// expected regData2[ 15 ]
initial
begin
	regData2_expected[15] = 1'bX;
end 
// expected regData2[ 14 ]
initial
begin
	regData2_expected[14] = 1'bX;
end 
// expected regData2[ 13 ]
initial
begin
	regData2_expected[13] = 1'bX;
end 
// expected regData2[ 12 ]
initial
begin
	regData2_expected[12] = 1'bX;
end 
// expected regData2[ 11 ]
initial
begin
	regData2_expected[11] = 1'bX;
end 
// expected regData2[ 10 ]
initial
begin
	regData2_expected[10] = 1'bX;
end 
// expected regData2[ 9 ]
initial
begin
	regData2_expected[9] = 1'bX;
end 
// expected regData2[ 8 ]
initial
begin
	regData2_expected[8] = 1'bX;
end 
// expected regData2[ 7 ]
initial
begin
	regData2_expected[7] = 1'bX;
end 
// expected regData2[ 6 ]
initial
begin
	regData2_expected[6] = 1'bX;
end 
// expected regData2[ 5 ]
initial
begin
	regData2_expected[5] = 1'bX;
end 
// expected regData2[ 4 ]
initial
begin
	regData2_expected[4] = 1'bX;
end 
// expected regData2[ 3 ]
initial
begin
	regData2_expected[3] = 1'bX;
end 
// expected regData2[ 2 ]
initial
begin
	regData2_expected[2] = 1'bX;
end 
// expected regData2[ 1 ]
initial
begin
	regData2_expected[1] = 1'bX;
end 
// expected regData2[ 0 ]
initial
begin
	regData2_expected[0] = 1'bX;
end 
// expected saidaULA[ 31 ]
initial
begin
	saidaULA_expected[31] = 1'bX;
end 
// expected saidaULA[ 30 ]
initial
begin
	saidaULA_expected[30] = 1'bX;
end 
// expected saidaULA[ 29 ]
initial
begin
	saidaULA_expected[29] = 1'bX;
end 
// expected saidaULA[ 28 ]
initial
begin
	saidaULA_expected[28] = 1'bX;
end 
// expected saidaULA[ 27 ]
initial
begin
	saidaULA_expected[27] = 1'bX;
end 
// expected saidaULA[ 26 ]
initial
begin
	saidaULA_expected[26] = 1'bX;
end 
// expected saidaULA[ 25 ]
initial
begin
	saidaULA_expected[25] = 1'bX;
end 
// expected saidaULA[ 24 ]
initial
begin
	saidaULA_expected[24] = 1'bX;
end 
// expected saidaULA[ 23 ]
initial
begin
	saidaULA_expected[23] = 1'bX;
end 
// expected saidaULA[ 22 ]
initial
begin
	saidaULA_expected[22] = 1'bX;
end 
// expected saidaULA[ 21 ]
initial
begin
	saidaULA_expected[21] = 1'bX;
end 
// expected saidaULA[ 20 ]
initial
begin
	saidaULA_expected[20] = 1'bX;
end 
// expected saidaULA[ 19 ]
initial
begin
	saidaULA_expected[19] = 1'bX;
end 
// expected saidaULA[ 18 ]
initial
begin
	saidaULA_expected[18] = 1'bX;
end 
// expected saidaULA[ 17 ]
initial
begin
	saidaULA_expected[17] = 1'bX;
end 
// expected saidaULA[ 16 ]
initial
begin
	saidaULA_expected[16] = 1'bX;
end 
// expected saidaULA[ 15 ]
initial
begin
	saidaULA_expected[15] = 1'bX;
end 
// expected saidaULA[ 14 ]
initial
begin
	saidaULA_expected[14] = 1'bX;
end 
// expected saidaULA[ 13 ]
initial
begin
	saidaULA_expected[13] = 1'bX;
end 
// expected saidaULA[ 12 ]
initial
begin
	saidaULA_expected[12] = 1'bX;
end 
// expected saidaULA[ 11 ]
initial
begin
	saidaULA_expected[11] = 1'bX;
end 
// expected saidaULA[ 10 ]
initial
begin
	saidaULA_expected[10] = 1'bX;
end 
// expected saidaULA[ 9 ]
initial
begin
	saidaULA_expected[9] = 1'bX;
end 
// expected saidaULA[ 8 ]
initial
begin
	saidaULA_expected[8] = 1'bX;
end 
// expected saidaULA[ 7 ]
initial
begin
	saidaULA_expected[7] = 1'bX;
end 
// expected saidaULA[ 6 ]
initial
begin
	saidaULA_expected[6] = 1'bX;
end 
// expected saidaULA[ 5 ]
initial
begin
	saidaULA_expected[5] = 1'bX;
end 
// expected saidaULA[ 4 ]
initial
begin
	saidaULA_expected[4] = 1'bX;
end 
// expected saidaULA[ 3 ]
initial
begin
	saidaULA_expected[3] = 1'bX;
end 
// expected saidaULA[ 2 ]
initial
begin
	saidaULA_expected[2] = 1'bX;
end 
// expected saidaULA[ 1 ]
initial
begin
	saidaULA_expected[1] = 1'bX;
end 
// expected saidaULA[ 0 ]
initial
begin
	saidaULA_expected[0] = 1'bX;
end 
// expected sign_extend[ 31 ]
initial
begin
	sign_extend_expected[31] = 1'bX;
end 
// expected sign_extend[ 30 ]
initial
begin
	sign_extend_expected[30] = 1'bX;
end 
// expected sign_extend[ 29 ]
initial
begin
	sign_extend_expected[29] = 1'bX;
end 
// expected sign_extend[ 28 ]
initial
begin
	sign_extend_expected[28] = 1'bX;
end 
// expected sign_extend[ 27 ]
initial
begin
	sign_extend_expected[27] = 1'bX;
end 
// expected sign_extend[ 26 ]
initial
begin
	sign_extend_expected[26] = 1'bX;
end 
// expected sign_extend[ 25 ]
initial
begin
	sign_extend_expected[25] = 1'bX;
end 
// expected sign_extend[ 24 ]
initial
begin
	sign_extend_expected[24] = 1'bX;
end 
// expected sign_extend[ 23 ]
initial
begin
	sign_extend_expected[23] = 1'bX;
end 
// expected sign_extend[ 22 ]
initial
begin
	sign_extend_expected[22] = 1'bX;
end 
// expected sign_extend[ 21 ]
initial
begin
	sign_extend_expected[21] = 1'bX;
end 
// expected sign_extend[ 20 ]
initial
begin
	sign_extend_expected[20] = 1'bX;
end 
// expected sign_extend[ 19 ]
initial
begin
	sign_extend_expected[19] = 1'bX;
end 
// expected sign_extend[ 18 ]
initial
begin
	sign_extend_expected[18] = 1'bX;
end 
// expected sign_extend[ 17 ]
initial
begin
	sign_extend_expected[17] = 1'bX;
end 
// expected sign_extend[ 16 ]
initial
begin
	sign_extend_expected[16] = 1'bX;
end 
// expected sign_extend[ 15 ]
initial
begin
	sign_extend_expected[15] = 1'bX;
end 
// expected sign_extend[ 14 ]
initial
begin
	sign_extend_expected[14] = 1'bX;
end 
// expected sign_extend[ 13 ]
initial
begin
	sign_extend_expected[13] = 1'bX;
end 
// expected sign_extend[ 12 ]
initial
begin
	sign_extend_expected[12] = 1'bX;
end 
// expected sign_extend[ 11 ]
initial
begin
	sign_extend_expected[11] = 1'bX;
end 
// expected sign_extend[ 10 ]
initial
begin
	sign_extend_expected[10] = 1'bX;
end 
// expected sign_extend[ 9 ]
initial
begin
	sign_extend_expected[9] = 1'bX;
end 
// expected sign_extend[ 8 ]
initial
begin
	sign_extend_expected[8] = 1'bX;
end 
// expected sign_extend[ 7 ]
initial
begin
	sign_extend_expected[7] = 1'bX;
end 
// expected sign_extend[ 6 ]
initial
begin
	sign_extend_expected[6] = 1'bX;
end 
// expected sign_extend[ 5 ]
initial
begin
	sign_extend_expected[5] = 1'bX;
end 
// expected sign_extend[ 4 ]
initial
begin
	sign_extend_expected[4] = 1'bX;
end 
// expected sign_extend[ 3 ]
initial
begin
	sign_extend_expected[3] = 1'bX;
end 
// expected sign_extend[ 2 ]
initial
begin
	sign_extend_expected[2] = 1'bX;
end 
// expected sign_extend[ 1 ]
initial
begin
	sign_extend_expected[1] = 1'bX;
end 
// expected sign_extend[ 0 ]
initial
begin
	sign_extend_expected[0] = 1'bX;
end 
// generate trigger
always @(finalMux_expected or finalMux or regData1_expected or regData1 or regData2_expected or regData2 or saidaULA_expected or saidaULA or sign_extend_expected or sign_extend)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected finalMux = %b | expected regData1 = %b | expected regData2 = %b | expected saidaULA = %b | expected sign_extend = %b | ",finalMux_expected_prev,regData1_expected_prev,regData2_expected_prev,saidaULA_expected_prev,sign_extend_expected_prev);
	$display("| real finalMux = %b | real regData1 = %b | real regData2 = %b | real saidaULA = %b | real sign_extend = %b | ",finalMux_prev,regData1_prev,regData2_prev,saidaULA_prev,sign_extend_prev);
`endif
	if (
		( finalMux_expected_prev[0] !== 1'bx ) && ( finalMux_prev[0] !== finalMux_expected_prev[0] )
		&& ((finalMux_expected_prev[0] !== last_finalMux_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[0] = finalMux_expected_prev[0];
	end
	if (
		( finalMux_expected_prev[1] !== 1'bx ) && ( finalMux_prev[1] !== finalMux_expected_prev[1] )
		&& ((finalMux_expected_prev[1] !== last_finalMux_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[1] = finalMux_expected_prev[1];
	end
	if (
		( finalMux_expected_prev[2] !== 1'bx ) && ( finalMux_prev[2] !== finalMux_expected_prev[2] )
		&& ((finalMux_expected_prev[2] !== last_finalMux_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[2] = finalMux_expected_prev[2];
	end
	if (
		( finalMux_expected_prev[3] !== 1'bx ) && ( finalMux_prev[3] !== finalMux_expected_prev[3] )
		&& ((finalMux_expected_prev[3] !== last_finalMux_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[3] = finalMux_expected_prev[3];
	end
	if (
		( finalMux_expected_prev[4] !== 1'bx ) && ( finalMux_prev[4] !== finalMux_expected_prev[4] )
		&& ((finalMux_expected_prev[4] !== last_finalMux_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[4] = finalMux_expected_prev[4];
	end
	if (
		( finalMux_expected_prev[5] !== 1'bx ) && ( finalMux_prev[5] !== finalMux_expected_prev[5] )
		&& ((finalMux_expected_prev[5] !== last_finalMux_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[5] = finalMux_expected_prev[5];
	end
	if (
		( finalMux_expected_prev[6] !== 1'bx ) && ( finalMux_prev[6] !== finalMux_expected_prev[6] )
		&& ((finalMux_expected_prev[6] !== last_finalMux_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[6] = finalMux_expected_prev[6];
	end
	if (
		( finalMux_expected_prev[7] !== 1'bx ) && ( finalMux_prev[7] !== finalMux_expected_prev[7] )
		&& ((finalMux_expected_prev[7] !== last_finalMux_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[7] = finalMux_expected_prev[7];
	end
	if (
		( finalMux_expected_prev[8] !== 1'bx ) && ( finalMux_prev[8] !== finalMux_expected_prev[8] )
		&& ((finalMux_expected_prev[8] !== last_finalMux_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[8] = finalMux_expected_prev[8];
	end
	if (
		( finalMux_expected_prev[9] !== 1'bx ) && ( finalMux_prev[9] !== finalMux_expected_prev[9] )
		&& ((finalMux_expected_prev[9] !== last_finalMux_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[9] = finalMux_expected_prev[9];
	end
	if (
		( finalMux_expected_prev[10] !== 1'bx ) && ( finalMux_prev[10] !== finalMux_expected_prev[10] )
		&& ((finalMux_expected_prev[10] !== last_finalMux_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[10] = finalMux_expected_prev[10];
	end
	if (
		( finalMux_expected_prev[11] !== 1'bx ) && ( finalMux_prev[11] !== finalMux_expected_prev[11] )
		&& ((finalMux_expected_prev[11] !== last_finalMux_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[11] = finalMux_expected_prev[11];
	end
	if (
		( finalMux_expected_prev[12] !== 1'bx ) && ( finalMux_prev[12] !== finalMux_expected_prev[12] )
		&& ((finalMux_expected_prev[12] !== last_finalMux_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[12] = finalMux_expected_prev[12];
	end
	if (
		( finalMux_expected_prev[13] !== 1'bx ) && ( finalMux_prev[13] !== finalMux_expected_prev[13] )
		&& ((finalMux_expected_prev[13] !== last_finalMux_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[13] = finalMux_expected_prev[13];
	end
	if (
		( finalMux_expected_prev[14] !== 1'bx ) && ( finalMux_prev[14] !== finalMux_expected_prev[14] )
		&& ((finalMux_expected_prev[14] !== last_finalMux_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[14] = finalMux_expected_prev[14];
	end
	if (
		( finalMux_expected_prev[15] !== 1'bx ) && ( finalMux_prev[15] !== finalMux_expected_prev[15] )
		&& ((finalMux_expected_prev[15] !== last_finalMux_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[15] = finalMux_expected_prev[15];
	end
	if (
		( finalMux_expected_prev[16] !== 1'bx ) && ( finalMux_prev[16] !== finalMux_expected_prev[16] )
		&& ((finalMux_expected_prev[16] !== last_finalMux_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[16] = finalMux_expected_prev[16];
	end
	if (
		( finalMux_expected_prev[17] !== 1'bx ) && ( finalMux_prev[17] !== finalMux_expected_prev[17] )
		&& ((finalMux_expected_prev[17] !== last_finalMux_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[17] = finalMux_expected_prev[17];
	end
	if (
		( finalMux_expected_prev[18] !== 1'bx ) && ( finalMux_prev[18] !== finalMux_expected_prev[18] )
		&& ((finalMux_expected_prev[18] !== last_finalMux_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[18] = finalMux_expected_prev[18];
	end
	if (
		( finalMux_expected_prev[19] !== 1'bx ) && ( finalMux_prev[19] !== finalMux_expected_prev[19] )
		&& ((finalMux_expected_prev[19] !== last_finalMux_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[19] = finalMux_expected_prev[19];
	end
	if (
		( finalMux_expected_prev[20] !== 1'bx ) && ( finalMux_prev[20] !== finalMux_expected_prev[20] )
		&& ((finalMux_expected_prev[20] !== last_finalMux_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[20] = finalMux_expected_prev[20];
	end
	if (
		( finalMux_expected_prev[21] !== 1'bx ) && ( finalMux_prev[21] !== finalMux_expected_prev[21] )
		&& ((finalMux_expected_prev[21] !== last_finalMux_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[21] = finalMux_expected_prev[21];
	end
	if (
		( finalMux_expected_prev[22] !== 1'bx ) && ( finalMux_prev[22] !== finalMux_expected_prev[22] )
		&& ((finalMux_expected_prev[22] !== last_finalMux_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[22] = finalMux_expected_prev[22];
	end
	if (
		( finalMux_expected_prev[23] !== 1'bx ) && ( finalMux_prev[23] !== finalMux_expected_prev[23] )
		&& ((finalMux_expected_prev[23] !== last_finalMux_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[23] = finalMux_expected_prev[23];
	end
	if (
		( finalMux_expected_prev[24] !== 1'bx ) && ( finalMux_prev[24] !== finalMux_expected_prev[24] )
		&& ((finalMux_expected_prev[24] !== last_finalMux_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[24] = finalMux_expected_prev[24];
	end
	if (
		( finalMux_expected_prev[25] !== 1'bx ) && ( finalMux_prev[25] !== finalMux_expected_prev[25] )
		&& ((finalMux_expected_prev[25] !== last_finalMux_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[25] = finalMux_expected_prev[25];
	end
	if (
		( finalMux_expected_prev[26] !== 1'bx ) && ( finalMux_prev[26] !== finalMux_expected_prev[26] )
		&& ((finalMux_expected_prev[26] !== last_finalMux_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[26] = finalMux_expected_prev[26];
	end
	if (
		( finalMux_expected_prev[27] !== 1'bx ) && ( finalMux_prev[27] !== finalMux_expected_prev[27] )
		&& ((finalMux_expected_prev[27] !== last_finalMux_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[27] = finalMux_expected_prev[27];
	end
	if (
		( finalMux_expected_prev[28] !== 1'bx ) && ( finalMux_prev[28] !== finalMux_expected_prev[28] )
		&& ((finalMux_expected_prev[28] !== last_finalMux_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[28] = finalMux_expected_prev[28];
	end
	if (
		( finalMux_expected_prev[29] !== 1'bx ) && ( finalMux_prev[29] !== finalMux_expected_prev[29] )
		&& ((finalMux_expected_prev[29] !== last_finalMux_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[29] = finalMux_expected_prev[29];
	end
	if (
		( finalMux_expected_prev[30] !== 1'bx ) && ( finalMux_prev[30] !== finalMux_expected_prev[30] )
		&& ((finalMux_expected_prev[30] !== last_finalMux_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[30] = finalMux_expected_prev[30];
	end
	if (
		( finalMux_expected_prev[31] !== 1'bx ) && ( finalMux_prev[31] !== finalMux_expected_prev[31] )
		&& ((finalMux_expected_prev[31] !== last_finalMux_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalMux[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalMux_expected_prev);
		$display ("     Real value = %b", finalMux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalMux_exp[31] = finalMux_expected_prev[31];
	end
	if (
		( regData1_expected_prev[0] !== 1'bx ) && ( regData1_prev[0] !== regData1_expected_prev[0] )
		&& ((regData1_expected_prev[0] !== last_regData1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[0] = regData1_expected_prev[0];
	end
	if (
		( regData1_expected_prev[1] !== 1'bx ) && ( regData1_prev[1] !== regData1_expected_prev[1] )
		&& ((regData1_expected_prev[1] !== last_regData1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[1] = regData1_expected_prev[1];
	end
	if (
		( regData1_expected_prev[2] !== 1'bx ) && ( regData1_prev[2] !== regData1_expected_prev[2] )
		&& ((regData1_expected_prev[2] !== last_regData1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[2] = regData1_expected_prev[2];
	end
	if (
		( regData1_expected_prev[3] !== 1'bx ) && ( regData1_prev[3] !== regData1_expected_prev[3] )
		&& ((regData1_expected_prev[3] !== last_regData1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[3] = regData1_expected_prev[3];
	end
	if (
		( regData1_expected_prev[4] !== 1'bx ) && ( regData1_prev[4] !== regData1_expected_prev[4] )
		&& ((regData1_expected_prev[4] !== last_regData1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[4] = regData1_expected_prev[4];
	end
	if (
		( regData1_expected_prev[5] !== 1'bx ) && ( regData1_prev[5] !== regData1_expected_prev[5] )
		&& ((regData1_expected_prev[5] !== last_regData1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[5] = regData1_expected_prev[5];
	end
	if (
		( regData1_expected_prev[6] !== 1'bx ) && ( regData1_prev[6] !== regData1_expected_prev[6] )
		&& ((regData1_expected_prev[6] !== last_regData1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[6] = regData1_expected_prev[6];
	end
	if (
		( regData1_expected_prev[7] !== 1'bx ) && ( regData1_prev[7] !== regData1_expected_prev[7] )
		&& ((regData1_expected_prev[7] !== last_regData1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[7] = regData1_expected_prev[7];
	end
	if (
		( regData1_expected_prev[8] !== 1'bx ) && ( regData1_prev[8] !== regData1_expected_prev[8] )
		&& ((regData1_expected_prev[8] !== last_regData1_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[8] = regData1_expected_prev[8];
	end
	if (
		( regData1_expected_prev[9] !== 1'bx ) && ( regData1_prev[9] !== regData1_expected_prev[9] )
		&& ((regData1_expected_prev[9] !== last_regData1_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[9] = regData1_expected_prev[9];
	end
	if (
		( regData1_expected_prev[10] !== 1'bx ) && ( regData1_prev[10] !== regData1_expected_prev[10] )
		&& ((regData1_expected_prev[10] !== last_regData1_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[10] = regData1_expected_prev[10];
	end
	if (
		( regData1_expected_prev[11] !== 1'bx ) && ( regData1_prev[11] !== regData1_expected_prev[11] )
		&& ((regData1_expected_prev[11] !== last_regData1_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[11] = regData1_expected_prev[11];
	end
	if (
		( regData1_expected_prev[12] !== 1'bx ) && ( regData1_prev[12] !== regData1_expected_prev[12] )
		&& ((regData1_expected_prev[12] !== last_regData1_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[12] = regData1_expected_prev[12];
	end
	if (
		( regData1_expected_prev[13] !== 1'bx ) && ( regData1_prev[13] !== regData1_expected_prev[13] )
		&& ((regData1_expected_prev[13] !== last_regData1_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[13] = regData1_expected_prev[13];
	end
	if (
		( regData1_expected_prev[14] !== 1'bx ) && ( regData1_prev[14] !== regData1_expected_prev[14] )
		&& ((regData1_expected_prev[14] !== last_regData1_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[14] = regData1_expected_prev[14];
	end
	if (
		( regData1_expected_prev[15] !== 1'bx ) && ( regData1_prev[15] !== regData1_expected_prev[15] )
		&& ((regData1_expected_prev[15] !== last_regData1_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[15] = regData1_expected_prev[15];
	end
	if (
		( regData1_expected_prev[16] !== 1'bx ) && ( regData1_prev[16] !== regData1_expected_prev[16] )
		&& ((regData1_expected_prev[16] !== last_regData1_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[16] = regData1_expected_prev[16];
	end
	if (
		( regData1_expected_prev[17] !== 1'bx ) && ( regData1_prev[17] !== regData1_expected_prev[17] )
		&& ((regData1_expected_prev[17] !== last_regData1_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[17] = regData1_expected_prev[17];
	end
	if (
		( regData1_expected_prev[18] !== 1'bx ) && ( regData1_prev[18] !== regData1_expected_prev[18] )
		&& ((regData1_expected_prev[18] !== last_regData1_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[18] = regData1_expected_prev[18];
	end
	if (
		( regData1_expected_prev[19] !== 1'bx ) && ( regData1_prev[19] !== regData1_expected_prev[19] )
		&& ((regData1_expected_prev[19] !== last_regData1_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[19] = regData1_expected_prev[19];
	end
	if (
		( regData1_expected_prev[20] !== 1'bx ) && ( regData1_prev[20] !== regData1_expected_prev[20] )
		&& ((regData1_expected_prev[20] !== last_regData1_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[20] = regData1_expected_prev[20];
	end
	if (
		( regData1_expected_prev[21] !== 1'bx ) && ( regData1_prev[21] !== regData1_expected_prev[21] )
		&& ((regData1_expected_prev[21] !== last_regData1_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[21] = regData1_expected_prev[21];
	end
	if (
		( regData1_expected_prev[22] !== 1'bx ) && ( regData1_prev[22] !== regData1_expected_prev[22] )
		&& ((regData1_expected_prev[22] !== last_regData1_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[22] = regData1_expected_prev[22];
	end
	if (
		( regData1_expected_prev[23] !== 1'bx ) && ( regData1_prev[23] !== regData1_expected_prev[23] )
		&& ((regData1_expected_prev[23] !== last_regData1_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[23] = regData1_expected_prev[23];
	end
	if (
		( regData1_expected_prev[24] !== 1'bx ) && ( regData1_prev[24] !== regData1_expected_prev[24] )
		&& ((regData1_expected_prev[24] !== last_regData1_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[24] = regData1_expected_prev[24];
	end
	if (
		( regData1_expected_prev[25] !== 1'bx ) && ( regData1_prev[25] !== regData1_expected_prev[25] )
		&& ((regData1_expected_prev[25] !== last_regData1_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[25] = regData1_expected_prev[25];
	end
	if (
		( regData1_expected_prev[26] !== 1'bx ) && ( regData1_prev[26] !== regData1_expected_prev[26] )
		&& ((regData1_expected_prev[26] !== last_regData1_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[26] = regData1_expected_prev[26];
	end
	if (
		( regData1_expected_prev[27] !== 1'bx ) && ( regData1_prev[27] !== regData1_expected_prev[27] )
		&& ((regData1_expected_prev[27] !== last_regData1_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[27] = regData1_expected_prev[27];
	end
	if (
		( regData1_expected_prev[28] !== 1'bx ) && ( regData1_prev[28] !== regData1_expected_prev[28] )
		&& ((regData1_expected_prev[28] !== last_regData1_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[28] = regData1_expected_prev[28];
	end
	if (
		( regData1_expected_prev[29] !== 1'bx ) && ( regData1_prev[29] !== regData1_expected_prev[29] )
		&& ((regData1_expected_prev[29] !== last_regData1_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[29] = regData1_expected_prev[29];
	end
	if (
		( regData1_expected_prev[30] !== 1'bx ) && ( regData1_prev[30] !== regData1_expected_prev[30] )
		&& ((regData1_expected_prev[30] !== last_regData1_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[30] = regData1_expected_prev[30];
	end
	if (
		( regData1_expected_prev[31] !== 1'bx ) && ( regData1_prev[31] !== regData1_expected_prev[31] )
		&& ((regData1_expected_prev[31] !== last_regData1_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData1_expected_prev);
		$display ("     Real value = %b", regData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regData1_exp[31] = regData1_expected_prev[31];
	end
	if (
		( regData2_expected_prev[0] !== 1'bx ) && ( regData2_prev[0] !== regData2_expected_prev[0] )
		&& ((regData2_expected_prev[0] !== last_regData2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[0] = regData2_expected_prev[0];
	end
	if (
		( regData2_expected_prev[1] !== 1'bx ) && ( regData2_prev[1] !== regData2_expected_prev[1] )
		&& ((regData2_expected_prev[1] !== last_regData2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[1] = regData2_expected_prev[1];
	end
	if (
		( regData2_expected_prev[2] !== 1'bx ) && ( regData2_prev[2] !== regData2_expected_prev[2] )
		&& ((regData2_expected_prev[2] !== last_regData2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[2] = regData2_expected_prev[2];
	end
	if (
		( regData2_expected_prev[3] !== 1'bx ) && ( regData2_prev[3] !== regData2_expected_prev[3] )
		&& ((regData2_expected_prev[3] !== last_regData2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[3] = regData2_expected_prev[3];
	end
	if (
		( regData2_expected_prev[4] !== 1'bx ) && ( regData2_prev[4] !== regData2_expected_prev[4] )
		&& ((regData2_expected_prev[4] !== last_regData2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[4] = regData2_expected_prev[4];
	end
	if (
		( regData2_expected_prev[5] !== 1'bx ) && ( regData2_prev[5] !== regData2_expected_prev[5] )
		&& ((regData2_expected_prev[5] !== last_regData2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[5] = regData2_expected_prev[5];
	end
	if (
		( regData2_expected_prev[6] !== 1'bx ) && ( regData2_prev[6] !== regData2_expected_prev[6] )
		&& ((regData2_expected_prev[6] !== last_regData2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[6] = regData2_expected_prev[6];
	end
	if (
		( regData2_expected_prev[7] !== 1'bx ) && ( regData2_prev[7] !== regData2_expected_prev[7] )
		&& ((regData2_expected_prev[7] !== last_regData2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[7] = regData2_expected_prev[7];
	end
	if (
		( regData2_expected_prev[8] !== 1'bx ) && ( regData2_prev[8] !== regData2_expected_prev[8] )
		&& ((regData2_expected_prev[8] !== last_regData2_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[8] = regData2_expected_prev[8];
	end
	if (
		( regData2_expected_prev[9] !== 1'bx ) && ( regData2_prev[9] !== regData2_expected_prev[9] )
		&& ((regData2_expected_prev[9] !== last_regData2_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[9] = regData2_expected_prev[9];
	end
	if (
		( regData2_expected_prev[10] !== 1'bx ) && ( regData2_prev[10] !== regData2_expected_prev[10] )
		&& ((regData2_expected_prev[10] !== last_regData2_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[10] = regData2_expected_prev[10];
	end
	if (
		( regData2_expected_prev[11] !== 1'bx ) && ( regData2_prev[11] !== regData2_expected_prev[11] )
		&& ((regData2_expected_prev[11] !== last_regData2_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[11] = regData2_expected_prev[11];
	end
	if (
		( regData2_expected_prev[12] !== 1'bx ) && ( regData2_prev[12] !== regData2_expected_prev[12] )
		&& ((regData2_expected_prev[12] !== last_regData2_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[12] = regData2_expected_prev[12];
	end
	if (
		( regData2_expected_prev[13] !== 1'bx ) && ( regData2_prev[13] !== regData2_expected_prev[13] )
		&& ((regData2_expected_prev[13] !== last_regData2_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[13] = regData2_expected_prev[13];
	end
	if (
		( regData2_expected_prev[14] !== 1'bx ) && ( regData2_prev[14] !== regData2_expected_prev[14] )
		&& ((regData2_expected_prev[14] !== last_regData2_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[14] = regData2_expected_prev[14];
	end
	if (
		( regData2_expected_prev[15] !== 1'bx ) && ( regData2_prev[15] !== regData2_expected_prev[15] )
		&& ((regData2_expected_prev[15] !== last_regData2_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[15] = regData2_expected_prev[15];
	end
	if (
		( regData2_expected_prev[16] !== 1'bx ) && ( regData2_prev[16] !== regData2_expected_prev[16] )
		&& ((regData2_expected_prev[16] !== last_regData2_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[16] = regData2_expected_prev[16];
	end
	if (
		( regData2_expected_prev[17] !== 1'bx ) && ( regData2_prev[17] !== regData2_expected_prev[17] )
		&& ((regData2_expected_prev[17] !== last_regData2_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[17] = regData2_expected_prev[17];
	end
	if (
		( regData2_expected_prev[18] !== 1'bx ) && ( regData2_prev[18] !== regData2_expected_prev[18] )
		&& ((regData2_expected_prev[18] !== last_regData2_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[18] = regData2_expected_prev[18];
	end
	if (
		( regData2_expected_prev[19] !== 1'bx ) && ( regData2_prev[19] !== regData2_expected_prev[19] )
		&& ((regData2_expected_prev[19] !== last_regData2_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[19] = regData2_expected_prev[19];
	end
	if (
		( regData2_expected_prev[20] !== 1'bx ) && ( regData2_prev[20] !== regData2_expected_prev[20] )
		&& ((regData2_expected_prev[20] !== last_regData2_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[20] = regData2_expected_prev[20];
	end
	if (
		( regData2_expected_prev[21] !== 1'bx ) && ( regData2_prev[21] !== regData2_expected_prev[21] )
		&& ((regData2_expected_prev[21] !== last_regData2_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[21] = regData2_expected_prev[21];
	end
	if (
		( regData2_expected_prev[22] !== 1'bx ) && ( regData2_prev[22] !== regData2_expected_prev[22] )
		&& ((regData2_expected_prev[22] !== last_regData2_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[22] = regData2_expected_prev[22];
	end
	if (
		( regData2_expected_prev[23] !== 1'bx ) && ( regData2_prev[23] !== regData2_expected_prev[23] )
		&& ((regData2_expected_prev[23] !== last_regData2_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[23] = regData2_expected_prev[23];
	end
	if (
		( regData2_expected_prev[24] !== 1'bx ) && ( regData2_prev[24] !== regData2_expected_prev[24] )
		&& ((regData2_expected_prev[24] !== last_regData2_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[24] = regData2_expected_prev[24];
	end
	if (
		( regData2_expected_prev[25] !== 1'bx ) && ( regData2_prev[25] !== regData2_expected_prev[25] )
		&& ((regData2_expected_prev[25] !== last_regData2_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[25] = regData2_expected_prev[25];
	end
	if (
		( regData2_expected_prev[26] !== 1'bx ) && ( regData2_prev[26] !== regData2_expected_prev[26] )
		&& ((regData2_expected_prev[26] !== last_regData2_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[26] = regData2_expected_prev[26];
	end
	if (
		( regData2_expected_prev[27] !== 1'bx ) && ( regData2_prev[27] !== regData2_expected_prev[27] )
		&& ((regData2_expected_prev[27] !== last_regData2_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[27] = regData2_expected_prev[27];
	end
	if (
		( regData2_expected_prev[28] !== 1'bx ) && ( regData2_prev[28] !== regData2_expected_prev[28] )
		&& ((regData2_expected_prev[28] !== last_regData2_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[28] = regData2_expected_prev[28];
	end
	if (
		( regData2_expected_prev[29] !== 1'bx ) && ( regData2_prev[29] !== regData2_expected_prev[29] )
		&& ((regData2_expected_prev[29] !== last_regData2_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[29] = regData2_expected_prev[29];
	end
	if (
		( regData2_expected_prev[30] !== 1'bx ) && ( regData2_prev[30] !== regData2_expected_prev[30] )
		&& ((regData2_expected_prev[30] !== last_regData2_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[30] = regData2_expected_prev[30];
	end
	if (
		( regData2_expected_prev[31] !== 1'bx ) && ( regData2_prev[31] !== regData2_expected_prev[31] )
		&& ((regData2_expected_prev[31] !== last_regData2_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regData2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regData2_expected_prev);
		$display ("     Real value = %b", regData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regData2_exp[31] = regData2_expected_prev[31];
	end
	if (
		( saidaULA_expected_prev[0] !== 1'bx ) && ( saidaULA_prev[0] !== saidaULA_expected_prev[0] )
		&& ((saidaULA_expected_prev[0] !== last_saidaULA_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[0] = saidaULA_expected_prev[0];
	end
	if (
		( saidaULA_expected_prev[1] !== 1'bx ) && ( saidaULA_prev[1] !== saidaULA_expected_prev[1] )
		&& ((saidaULA_expected_prev[1] !== last_saidaULA_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[1] = saidaULA_expected_prev[1];
	end
	if (
		( saidaULA_expected_prev[2] !== 1'bx ) && ( saidaULA_prev[2] !== saidaULA_expected_prev[2] )
		&& ((saidaULA_expected_prev[2] !== last_saidaULA_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[2] = saidaULA_expected_prev[2];
	end
	if (
		( saidaULA_expected_prev[3] !== 1'bx ) && ( saidaULA_prev[3] !== saidaULA_expected_prev[3] )
		&& ((saidaULA_expected_prev[3] !== last_saidaULA_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[3] = saidaULA_expected_prev[3];
	end
	if (
		( saidaULA_expected_prev[4] !== 1'bx ) && ( saidaULA_prev[4] !== saidaULA_expected_prev[4] )
		&& ((saidaULA_expected_prev[4] !== last_saidaULA_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[4] = saidaULA_expected_prev[4];
	end
	if (
		( saidaULA_expected_prev[5] !== 1'bx ) && ( saidaULA_prev[5] !== saidaULA_expected_prev[5] )
		&& ((saidaULA_expected_prev[5] !== last_saidaULA_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[5] = saidaULA_expected_prev[5];
	end
	if (
		( saidaULA_expected_prev[6] !== 1'bx ) && ( saidaULA_prev[6] !== saidaULA_expected_prev[6] )
		&& ((saidaULA_expected_prev[6] !== last_saidaULA_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[6] = saidaULA_expected_prev[6];
	end
	if (
		( saidaULA_expected_prev[7] !== 1'bx ) && ( saidaULA_prev[7] !== saidaULA_expected_prev[7] )
		&& ((saidaULA_expected_prev[7] !== last_saidaULA_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[7] = saidaULA_expected_prev[7];
	end
	if (
		( saidaULA_expected_prev[8] !== 1'bx ) && ( saidaULA_prev[8] !== saidaULA_expected_prev[8] )
		&& ((saidaULA_expected_prev[8] !== last_saidaULA_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[8] = saidaULA_expected_prev[8];
	end
	if (
		( saidaULA_expected_prev[9] !== 1'bx ) && ( saidaULA_prev[9] !== saidaULA_expected_prev[9] )
		&& ((saidaULA_expected_prev[9] !== last_saidaULA_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[9] = saidaULA_expected_prev[9];
	end
	if (
		( saidaULA_expected_prev[10] !== 1'bx ) && ( saidaULA_prev[10] !== saidaULA_expected_prev[10] )
		&& ((saidaULA_expected_prev[10] !== last_saidaULA_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[10] = saidaULA_expected_prev[10];
	end
	if (
		( saidaULA_expected_prev[11] !== 1'bx ) && ( saidaULA_prev[11] !== saidaULA_expected_prev[11] )
		&& ((saidaULA_expected_prev[11] !== last_saidaULA_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[11] = saidaULA_expected_prev[11];
	end
	if (
		( saidaULA_expected_prev[12] !== 1'bx ) && ( saidaULA_prev[12] !== saidaULA_expected_prev[12] )
		&& ((saidaULA_expected_prev[12] !== last_saidaULA_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[12] = saidaULA_expected_prev[12];
	end
	if (
		( saidaULA_expected_prev[13] !== 1'bx ) && ( saidaULA_prev[13] !== saidaULA_expected_prev[13] )
		&& ((saidaULA_expected_prev[13] !== last_saidaULA_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[13] = saidaULA_expected_prev[13];
	end
	if (
		( saidaULA_expected_prev[14] !== 1'bx ) && ( saidaULA_prev[14] !== saidaULA_expected_prev[14] )
		&& ((saidaULA_expected_prev[14] !== last_saidaULA_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[14] = saidaULA_expected_prev[14];
	end
	if (
		( saidaULA_expected_prev[15] !== 1'bx ) && ( saidaULA_prev[15] !== saidaULA_expected_prev[15] )
		&& ((saidaULA_expected_prev[15] !== last_saidaULA_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[15] = saidaULA_expected_prev[15];
	end
	if (
		( saidaULA_expected_prev[16] !== 1'bx ) && ( saidaULA_prev[16] !== saidaULA_expected_prev[16] )
		&& ((saidaULA_expected_prev[16] !== last_saidaULA_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[16] = saidaULA_expected_prev[16];
	end
	if (
		( saidaULA_expected_prev[17] !== 1'bx ) && ( saidaULA_prev[17] !== saidaULA_expected_prev[17] )
		&& ((saidaULA_expected_prev[17] !== last_saidaULA_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[17] = saidaULA_expected_prev[17];
	end
	if (
		( saidaULA_expected_prev[18] !== 1'bx ) && ( saidaULA_prev[18] !== saidaULA_expected_prev[18] )
		&& ((saidaULA_expected_prev[18] !== last_saidaULA_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[18] = saidaULA_expected_prev[18];
	end
	if (
		( saidaULA_expected_prev[19] !== 1'bx ) && ( saidaULA_prev[19] !== saidaULA_expected_prev[19] )
		&& ((saidaULA_expected_prev[19] !== last_saidaULA_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[19] = saidaULA_expected_prev[19];
	end
	if (
		( saidaULA_expected_prev[20] !== 1'bx ) && ( saidaULA_prev[20] !== saidaULA_expected_prev[20] )
		&& ((saidaULA_expected_prev[20] !== last_saidaULA_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[20] = saidaULA_expected_prev[20];
	end
	if (
		( saidaULA_expected_prev[21] !== 1'bx ) && ( saidaULA_prev[21] !== saidaULA_expected_prev[21] )
		&& ((saidaULA_expected_prev[21] !== last_saidaULA_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[21] = saidaULA_expected_prev[21];
	end
	if (
		( saidaULA_expected_prev[22] !== 1'bx ) && ( saidaULA_prev[22] !== saidaULA_expected_prev[22] )
		&& ((saidaULA_expected_prev[22] !== last_saidaULA_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[22] = saidaULA_expected_prev[22];
	end
	if (
		( saidaULA_expected_prev[23] !== 1'bx ) && ( saidaULA_prev[23] !== saidaULA_expected_prev[23] )
		&& ((saidaULA_expected_prev[23] !== last_saidaULA_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[23] = saidaULA_expected_prev[23];
	end
	if (
		( saidaULA_expected_prev[24] !== 1'bx ) && ( saidaULA_prev[24] !== saidaULA_expected_prev[24] )
		&& ((saidaULA_expected_prev[24] !== last_saidaULA_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[24] = saidaULA_expected_prev[24];
	end
	if (
		( saidaULA_expected_prev[25] !== 1'bx ) && ( saidaULA_prev[25] !== saidaULA_expected_prev[25] )
		&& ((saidaULA_expected_prev[25] !== last_saidaULA_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[25] = saidaULA_expected_prev[25];
	end
	if (
		( saidaULA_expected_prev[26] !== 1'bx ) && ( saidaULA_prev[26] !== saidaULA_expected_prev[26] )
		&& ((saidaULA_expected_prev[26] !== last_saidaULA_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[26] = saidaULA_expected_prev[26];
	end
	if (
		( saidaULA_expected_prev[27] !== 1'bx ) && ( saidaULA_prev[27] !== saidaULA_expected_prev[27] )
		&& ((saidaULA_expected_prev[27] !== last_saidaULA_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[27] = saidaULA_expected_prev[27];
	end
	if (
		( saidaULA_expected_prev[28] !== 1'bx ) && ( saidaULA_prev[28] !== saidaULA_expected_prev[28] )
		&& ((saidaULA_expected_prev[28] !== last_saidaULA_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[28] = saidaULA_expected_prev[28];
	end
	if (
		( saidaULA_expected_prev[29] !== 1'bx ) && ( saidaULA_prev[29] !== saidaULA_expected_prev[29] )
		&& ((saidaULA_expected_prev[29] !== last_saidaULA_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[29] = saidaULA_expected_prev[29];
	end
	if (
		( saidaULA_expected_prev[30] !== 1'bx ) && ( saidaULA_prev[30] !== saidaULA_expected_prev[30] )
		&& ((saidaULA_expected_prev[30] !== last_saidaULA_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[30] = saidaULA_expected_prev[30];
	end
	if (
		( saidaULA_expected_prev[31] !== 1'bx ) && ( saidaULA_prev[31] !== saidaULA_expected_prev[31] )
		&& ((saidaULA_expected_prev[31] !== last_saidaULA_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaULA_exp[31] = saidaULA_expected_prev[31];
	end
	if (
		( sign_extend_expected_prev[0] !== 1'bx ) && ( sign_extend_prev[0] !== sign_extend_expected_prev[0] )
		&& ((sign_extend_expected_prev[0] !== last_sign_extend_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[0] = sign_extend_expected_prev[0];
	end
	if (
		( sign_extend_expected_prev[1] !== 1'bx ) && ( sign_extend_prev[1] !== sign_extend_expected_prev[1] )
		&& ((sign_extend_expected_prev[1] !== last_sign_extend_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[1] = sign_extend_expected_prev[1];
	end
	if (
		( sign_extend_expected_prev[2] !== 1'bx ) && ( sign_extend_prev[2] !== sign_extend_expected_prev[2] )
		&& ((sign_extend_expected_prev[2] !== last_sign_extend_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[2] = sign_extend_expected_prev[2];
	end
	if (
		( sign_extend_expected_prev[3] !== 1'bx ) && ( sign_extend_prev[3] !== sign_extend_expected_prev[3] )
		&& ((sign_extend_expected_prev[3] !== last_sign_extend_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[3] = sign_extend_expected_prev[3];
	end
	if (
		( sign_extend_expected_prev[4] !== 1'bx ) && ( sign_extend_prev[4] !== sign_extend_expected_prev[4] )
		&& ((sign_extend_expected_prev[4] !== last_sign_extend_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[4] = sign_extend_expected_prev[4];
	end
	if (
		( sign_extend_expected_prev[5] !== 1'bx ) && ( sign_extend_prev[5] !== sign_extend_expected_prev[5] )
		&& ((sign_extend_expected_prev[5] !== last_sign_extend_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[5] = sign_extend_expected_prev[5];
	end
	if (
		( sign_extend_expected_prev[6] !== 1'bx ) && ( sign_extend_prev[6] !== sign_extend_expected_prev[6] )
		&& ((sign_extend_expected_prev[6] !== last_sign_extend_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[6] = sign_extend_expected_prev[6];
	end
	if (
		( sign_extend_expected_prev[7] !== 1'bx ) && ( sign_extend_prev[7] !== sign_extend_expected_prev[7] )
		&& ((sign_extend_expected_prev[7] !== last_sign_extend_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[7] = sign_extend_expected_prev[7];
	end
	if (
		( sign_extend_expected_prev[8] !== 1'bx ) && ( sign_extend_prev[8] !== sign_extend_expected_prev[8] )
		&& ((sign_extend_expected_prev[8] !== last_sign_extend_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[8] = sign_extend_expected_prev[8];
	end
	if (
		( sign_extend_expected_prev[9] !== 1'bx ) && ( sign_extend_prev[9] !== sign_extend_expected_prev[9] )
		&& ((sign_extend_expected_prev[9] !== last_sign_extend_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[9] = sign_extend_expected_prev[9];
	end
	if (
		( sign_extend_expected_prev[10] !== 1'bx ) && ( sign_extend_prev[10] !== sign_extend_expected_prev[10] )
		&& ((sign_extend_expected_prev[10] !== last_sign_extend_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[10] = sign_extend_expected_prev[10];
	end
	if (
		( sign_extend_expected_prev[11] !== 1'bx ) && ( sign_extend_prev[11] !== sign_extend_expected_prev[11] )
		&& ((sign_extend_expected_prev[11] !== last_sign_extend_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[11] = sign_extend_expected_prev[11];
	end
	if (
		( sign_extend_expected_prev[12] !== 1'bx ) && ( sign_extend_prev[12] !== sign_extend_expected_prev[12] )
		&& ((sign_extend_expected_prev[12] !== last_sign_extend_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[12] = sign_extend_expected_prev[12];
	end
	if (
		( sign_extend_expected_prev[13] !== 1'bx ) && ( sign_extend_prev[13] !== sign_extend_expected_prev[13] )
		&& ((sign_extend_expected_prev[13] !== last_sign_extend_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[13] = sign_extend_expected_prev[13];
	end
	if (
		( sign_extend_expected_prev[14] !== 1'bx ) && ( sign_extend_prev[14] !== sign_extend_expected_prev[14] )
		&& ((sign_extend_expected_prev[14] !== last_sign_extend_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[14] = sign_extend_expected_prev[14];
	end
	if (
		( sign_extend_expected_prev[15] !== 1'bx ) && ( sign_extend_prev[15] !== sign_extend_expected_prev[15] )
		&& ((sign_extend_expected_prev[15] !== last_sign_extend_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[15] = sign_extend_expected_prev[15];
	end
	if (
		( sign_extend_expected_prev[16] !== 1'bx ) && ( sign_extend_prev[16] !== sign_extend_expected_prev[16] )
		&& ((sign_extend_expected_prev[16] !== last_sign_extend_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[16] = sign_extend_expected_prev[16];
	end
	if (
		( sign_extend_expected_prev[17] !== 1'bx ) && ( sign_extend_prev[17] !== sign_extend_expected_prev[17] )
		&& ((sign_extend_expected_prev[17] !== last_sign_extend_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[17] = sign_extend_expected_prev[17];
	end
	if (
		( sign_extend_expected_prev[18] !== 1'bx ) && ( sign_extend_prev[18] !== sign_extend_expected_prev[18] )
		&& ((sign_extend_expected_prev[18] !== last_sign_extend_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[18] = sign_extend_expected_prev[18];
	end
	if (
		( sign_extend_expected_prev[19] !== 1'bx ) && ( sign_extend_prev[19] !== sign_extend_expected_prev[19] )
		&& ((sign_extend_expected_prev[19] !== last_sign_extend_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[19] = sign_extend_expected_prev[19];
	end
	if (
		( sign_extend_expected_prev[20] !== 1'bx ) && ( sign_extend_prev[20] !== sign_extend_expected_prev[20] )
		&& ((sign_extend_expected_prev[20] !== last_sign_extend_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[20] = sign_extend_expected_prev[20];
	end
	if (
		( sign_extend_expected_prev[21] !== 1'bx ) && ( sign_extend_prev[21] !== sign_extend_expected_prev[21] )
		&& ((sign_extend_expected_prev[21] !== last_sign_extend_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[21] = sign_extend_expected_prev[21];
	end
	if (
		( sign_extend_expected_prev[22] !== 1'bx ) && ( sign_extend_prev[22] !== sign_extend_expected_prev[22] )
		&& ((sign_extend_expected_prev[22] !== last_sign_extend_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[22] = sign_extend_expected_prev[22];
	end
	if (
		( sign_extend_expected_prev[23] !== 1'bx ) && ( sign_extend_prev[23] !== sign_extend_expected_prev[23] )
		&& ((sign_extend_expected_prev[23] !== last_sign_extend_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[23] = sign_extend_expected_prev[23];
	end
	if (
		( sign_extend_expected_prev[24] !== 1'bx ) && ( sign_extend_prev[24] !== sign_extend_expected_prev[24] )
		&& ((sign_extend_expected_prev[24] !== last_sign_extend_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[24] = sign_extend_expected_prev[24];
	end
	if (
		( sign_extend_expected_prev[25] !== 1'bx ) && ( sign_extend_prev[25] !== sign_extend_expected_prev[25] )
		&& ((sign_extend_expected_prev[25] !== last_sign_extend_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[25] = sign_extend_expected_prev[25];
	end
	if (
		( sign_extend_expected_prev[26] !== 1'bx ) && ( sign_extend_prev[26] !== sign_extend_expected_prev[26] )
		&& ((sign_extend_expected_prev[26] !== last_sign_extend_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[26] = sign_extend_expected_prev[26];
	end
	if (
		( sign_extend_expected_prev[27] !== 1'bx ) && ( sign_extend_prev[27] !== sign_extend_expected_prev[27] )
		&& ((sign_extend_expected_prev[27] !== last_sign_extend_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[27] = sign_extend_expected_prev[27];
	end
	if (
		( sign_extend_expected_prev[28] !== 1'bx ) && ( sign_extend_prev[28] !== sign_extend_expected_prev[28] )
		&& ((sign_extend_expected_prev[28] !== last_sign_extend_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[28] = sign_extend_expected_prev[28];
	end
	if (
		( sign_extend_expected_prev[29] !== 1'bx ) && ( sign_extend_prev[29] !== sign_extend_expected_prev[29] )
		&& ((sign_extend_expected_prev[29] !== last_sign_extend_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[29] = sign_extend_expected_prev[29];
	end
	if (
		( sign_extend_expected_prev[30] !== 1'bx ) && ( sign_extend_prev[30] !== sign_extend_expected_prev[30] )
		&& ((sign_extend_expected_prev[30] !== last_sign_extend_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[30] = sign_extend_expected_prev[30];
	end
	if (
		( sign_extend_expected_prev[31] !== 1'bx ) && ( sign_extend_prev[31] !== sign_extend_expected_prev[31] )
		&& ((sign_extend_expected_prev[31] !== last_sign_extend_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_extend[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_extend_expected_prev);
		$display ("     Real value = %b", sign_extend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_extend_exp[31] = sign_extend_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MIPSGMN_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [31:0] finalMux;
wire [31:0] regData1;
wire [31:0] regData2;
wire [31:0] saidaULA;
wire [31:0] sign_extend;

wire sampler;                             

// assign statements (if any)                          
MIPSGMN i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.finalMux(finalMux),
	.regData1(regData1),
	.regData2(regData2),
	.saidaULA(saidaULA),
	.sign_extend(sign_extend)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

MIPSGMN_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

MIPSGMN_vlg_check_tst tb_out(
	.finalMux(finalMux),
	.regData1(regData1),
	.regData2(regData2),
	.saidaULA(saidaULA),
	.sign_extend(sign_extend),
	.sampler_rx(sampler)
);
endmodule

